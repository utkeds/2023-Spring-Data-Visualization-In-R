---
subtitle: "Data Viz & R Basics"
title: "Week 2 - STEM 691"
author: "Dr. Kelly Boles"
format:
  revealjs:
    theme: [simple, utk_eds_style.scss]
    mainfont: Montserrat
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: tango
    title-slide-attributes:
      data-background-color: "#4B4B4B"
      data-background-image: UnitShortcut.png
      data-background-size: 50%
      data-background-position: 50% 9%
    footer: UTK Educational Data Science
knitr:
  opts_chunk: 
    fig.align: center
    echo: true
    warning: false
    message: false
---
    
```{r setup, include=FALSE}
library(tidyverse) #includes starwars data set

#devtools::install_github("RMHogervorst/TNG")
library(TNG)
```

# Weekly Check In

# Start Recording

## Today's Agenda
<hr>

:::{.small-font}
- Weekly Check In
- Norms
- Creating R Project for This Class
- Working with R Markdown
- `tidyverse` Introduction
  - `dplyr` Basics
  - `ggplot2` Preview
- `tidykids` Scavenger Hunt
- Looking Ahead

:::

## Norms
<hr>

:::{.compact-font}
| In person norms | And also, for online learning... |
|----------|----------|
| Be fully present to each other & the work. | Keep your video on when possible. In large groups, mute your microphone when not talking. Close/mute/minimize other apps and devices to avoid distraction. |
| Assume positive intent & also take responsibility for the impact you have. | Remember online interaction masks even more of the full story. Notice when you are making assumptions, and seek information to check them. |
| Embrace collaboration. | Use the gallery view so you can see everyone. Use breakout groups as an opportunity to collaborate. |
| Be open to learning and accept non-closure. | Expect the inevitable technical glitches and learning curves. Exercise patience with one another. |
| Be aware of when to step up and step back. When stepping back, do so as an active listener. | Try out different modes of participation. Step back by making space for others to engage in these. |
| Land your plane--get to the point you intended. | We all know how hard it is to be talked at, especially in a Zoom session, so let's keep it to a minimum. |

:::

# R Markdown

## Creating an R Project
- If you haven't already, let's create an R Project for this class.
- I use `Week-1`, `Week-2`, etc. subfolders.

## R Markdown
<hr>

:::{.small-font}
- R Markdown is a file format for making **dynamic documents with R**.
- An R Markdown document is written in markdown (a **plain text** format) and contains **chunks of embedded R code**.
- The markdown file is then **processed by `knitr`**, and then pandoc which converts the markdown to a **PDF, Word, or HTML file**.
- File extension: `.Rmd`
:::

## R Markdown - Plain Text
<hr>

:::{layout="[50,50]"}
![](RmdPlainTextExample.png)<br>[Plain Text in `.Rmd`]{.small-font}

![](RMarkdownPlainTextFormatting.png)<br>[Plain Text Formatting]{.small-font}
:::

## R Markdown - Plain Text - Activity
<hr>
- In [Canvas](https://utk.instructure.com/courses/213032) you will find an activity called `R Markdown: In-Class Activity`
- It should open up another page with instructions.
- There is file to download in the opening step. Download it and put it in your `Week-2` folder within your R Project.

## R Markdown - Code Chunks
<hr>

- The other part of an R Markdown document is the **code chunks**.

:::{layout="[50,50]"}
![](RMarkdownCodeChunkExample.png)<br>[Code Chunk in a `.Rmd`]{.small-font}

::::{.small-font}
- {r echo = T} : **shows the code** when knitted
- {r eval = F} : **code does not run**
- {r message = F}: **hides messages** 
- {r warning = F}: **hides warnings**
::::

:::

## R Markdown - Knitting Errors
<hr>
- When Rmd fails to knit, it will tell you which chunk the error is in:

![](CodeChunkKnitError.png)<br>[Error in lines 17-18]{.small-font}

## R Markdown
<hr>
- Most of your homework will be submitted as R Markdown files.
- Including this week's!

# `tidyverse` Intro
- `dplyr`
- `ggplot2`

# `dplyr` Basics

## `dplyr` Basics
<hr>
- Code-a-long
- **In chat:** What is a function?

## `dplyr` Basic Functions
<hr>
```{r include=FALSE}
starwars <- starwars |>
  slice(1:5) |>
  select(1:5)
```

`select()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`select(name, height)`]{.fragment}

[- Use this to **select columns/variables**]{.extra-small-font .fragment}
<br>
<div class="fragment">
```{r}
starwars |>
  select(name, height)
```
</div>
::::
:::

## `dplyr` Basic Functions
<hr>
`select()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
`select(name, height)`

[- **Note:** These are the same!]{.extra-small-font}
<br>

```{r echo=TRUE, eval=FALSE}
starwars |>
  select(name, height)

select(starwars, name, height)
```
::::
:::

# Why the same?

## `dplyr` Basic Functions
<hr>
Pipe Operator: `%>% or |>`
<hr>

[The pipe operator connects functions together into a *chain* of step-by-step commands. It can be translated as **and then**.]{.small-font}

:::{layout="[65,35]"}
::::{layout="[1]" .small-font}
<br>
<br>
```{r, echo=TRUE, eval = TRUE, warning=TRUE}
starwars |>
  select(name, height) |>
  glimpse()
```
::::
::::{.small-font}
<br>
*In English*:<br>

:::{.extra-small-font .incremental}
1. Take the starwars data set *and then*
2. `select` the name and height columns *and then*
3. `view` the result in R Studio
:::
::::
:::

## `dplyr` Basic Functions
<hr>
`filter()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`filter(mass >= 50)`]{.fragment}

[- Use this to **filter rows**]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  filter(mass >= 50)
```
</div>
::::
::::
:::

## `dplyr` Basic Functions
<hr>
`str()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`str(starwars)`]{.fragment}

[- Use this to see the **structure** of an object]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
str(starwars)
```
</div>
::::
::::
:::

## `dplyr` Basic Functions
<hr>
`head()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`head(starwars)`]{.fragment}

[- Use this to **see the first** ***n*** **rows** of an object]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
head(starwars)

head(starwars, 2)
```
</div>
::::
::::
:::

## `dplyr` Basic Functions
<hr>
`rename()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`rename("weight" = mass)`]{.fragment .extra-small-font}

[- Use this to **rename** a column]{.extra-small-font .fragment}
<br>

::::{.extra-small-font}
<div class="fragment">
```{r}
starwars |>
  rename("weight" = mass)
```
</div>
::::
::::
:::

## `dplyr` Basic Functions
<hr>
`mutate()`
<br>
<hr>
:::{layout="[55,45]" .small-font}

::::{layout="[1]" .extra-small-font}
<br>
<br>
[**Example df - starwars**]{.small-font}
<br>
<br>
```{r echo=FALSE}
starwars |>
  knitr::kable(format = "html", table.attr = "class='table-striped'")
```
::::

::::{layout="[1]"}
<br>
[`mutate()` A Challenge!]{.fragment}

:::{.extra-small-font .fragment}
1. How many columns do we expect?
2. What does each line do?
3. Can we simplify it?
:::

::::{.extra-small-font}
<div class="fragment">
```{r eval=F}
starwars |>
  mutate(one = height^2) |>
  mutate(two = height*mass) |>
  mutate(hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
</div>
::::
::::
:::

## `dplyr` Basic Functions
<hr>
`mutate()`
<br>
<hr>

[`mutate()` A Challenge!]{.fragment}

::::{.small-font}
<div class="fragment">
```{r eval=T}
starwars |>
  mutate(one = height^2) |>
  mutate(two = height*mass) |>
  mutate(hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
</div>
::::

## `dplyr` Basic Functions
<hr>
`mutate()`
<br>
<hr>

`mutate()` A Challenge!

::::{.small-font}
```{r eval=T}
starwars |>
  mutate(one = height^2,
        two = height*mass,
        hair_color = ifelse(is.na(hair_color),
                             "unknown", hair_color))
```
::::

# `ggplot2` Preview

## `ggplot2` Preview
<hr>
- `ggplot2` or `ggplot` is most popular data viz package in R.
- Part of the `tidyverse`
- We'll learn more in Week 4, but you'll have a preview in this week's homework.

# `PalmersPenguins` Scavenger Hunt


